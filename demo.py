#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Steam Workshop Downloader - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ GUI
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import sys
import time
from steam_api import SteamAPI
from cache import Cache
from utils import format_file_size, format_time_ago

def print_header(title):
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    print("\n" + "=" * 60)
    print(f" {title}")
    print("=" * 60)

def print_separator():
    """–ü–µ—á–∞—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è"""
    print("-" * 60)

def demo_steam_api():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Steam API"""
    print_header("üéÆ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø STEAM API")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API
    steam_api = SteamAPI()
    
    print("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–≥—Ä...")
    try:
        games = steam_api.get_popular_games(limit=10)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(games)} –∏–≥—Ä:")
        
        for i, game in enumerate(games[:5], 1):
            print(f"  {i}. {game['name']} (ID: {game['appid']})")
            
        print(f"  ... –∏ –µ—â–µ {len(games) - 5} –∏–≥—Ä")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None
        
    return games

def demo_workshop_items(games):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π"""
    print_header("üõ† –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ú–ê–°–¢–ï–†–°–ö–û–ô")
    
    if not games:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
        return
        
    steam_api = SteamAPI()
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∏–≥—Ä—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    game = games[0]
    print(f"üéØ –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π –¥–ª—è –∏–≥—Ä—ã: {game['name']}")
    
    try:
        workshop_items = steam_api.get_workshop_items(game['appid'], per_page=5)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(workshop_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
        
        for i, item in enumerate(workshop_items, 1):
            print(f"\n  üì¶ {i}. {item['title']}")
            print(f"     üë§ –ê–≤—Ç–æ—Ä: {item.get('creator', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"     üìä –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {item.get('subscriptions', 0)}")
            print(f"     üíæ –†–∞–∑–º–µ—Ä: {format_file_size(item.get('file_size', 0))}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)
            description = item.get('description', '')
            if description:
                desc_short = description[:100] + "..." if len(description) > 100 else description
                print(f"     üìù –û–ø–∏—Å–∞–Ω–∏–µ: {desc_short}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π: {e}")

def demo_cache():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print_header("üíæ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø")
    
    cache = Cache(default_ttl=10)  # 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    
    print("üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à...")
    test_data = {
        'message': '–ü—Ä–∏–≤–µ—Ç –∏–∑ –∫—ç—à–∞!',
        'timestamp': time.time(),
        'items': ['—ç–ª–µ–º–µ–Ω—Ç1', '—ç–ª–µ–º–µ–Ω—Ç2', '—ç–ª–µ–º–µ–Ω—Ç3']
    }
    
    cache.set('demo_key', test_data, ttl=5)
    print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å TTL = 5 —Å–µ–∫—É–Ω–¥")
    
    print("\nüìñ –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞...")
    cached_data = cache.get('demo_key')
    if cached_data:
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫—ç—à–∞:")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {cached_data['message']}")
        print(f"   –≠–ª–µ–º–µ–Ω—Ç—ã: {', '.join(cached_data['items'])}")
    else:
        print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫—ç—à–µ")
    
    print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è TTL (5 —Å–µ–∫—É–Ω–¥)...")
    time.sleep(6)
    
    print("üìñ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è TTL...")
    cached_data = cache.get('demo_key')
    if cached_data:
        print("‚ùå –î–∞–Ω–Ω—ã–µ –≤—Å–µ –µ—â–µ –≤ –∫—ç—à–µ (–æ—à–∏–±–∫–∞ TTL)")
    else:
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫—ç—à–∞ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è TTL")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
    stats = cache.get_stats()
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:")
    print(f"   –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {stats['total_items']}")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {stats['active_items']}")
    print(f"   –ò—Å—Ç–µ–∫—à–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {stats['expired_items']}")

def demo_search():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞"""
    print_header("üîç –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–û–ò–°–ö–ê")
    
    steam_api = SteamAPI()
    
    search_queries = ['Counter', 'Dota', 'Garry']
    
    for query in search_queries:
        print(f"\nüîé –ü–æ–∏—Å–∫ –∏–≥—Ä –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")
        try:
            results = steam_api.search_games(query, limit=3)
            if results:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
                for i, game in enumerate(results, 1):
                    print(f"  {i}. {game['name']} (ID: {game['appid']})")
            else:
                print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

def demo_download_simulation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏"""
    print_header("‚¨áÔ∏è –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò")
    
    print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π...")
    
    test_item = {
        'publishedfileid': '123456789',
        'title': '–¢–µ—Å—Ç–æ–≤—ã–π –º–æ–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏',
        'description': '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –º–æ–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π –∑–∞–≥—Ä—É–∑–∫–∏',
        'creator': 'TestUser',
        'file_size': 1024 * 1024 * 15,  # 15 MB
        'filename': 'test_mod.zip',
        'file_url': 'https://example.com/test_mod.zip'
    }
    
    print(f"üì¶ –≠–ª–µ–º–µ–Ω—Ç: {test_item['title']}")
    print(f"üë§ –ê–≤—Ç–æ—Ä: {test_item['creator']}")
    print(f"üíæ –†–∞–∑–º–µ—Ä: {format_file_size(test_item['file_size'])}")
    print(f"üìÑ –§–∞–π–ª: {test_item['filename']}")
    
    print("\n‚¨áÔ∏è –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
    total_size = test_item['file_size']
    chunk_size = 1024 * 100  # 100KB chunks
    downloaded = 0
    
    print("–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏:")
    while downloaded < total_size:
        downloaded += chunk_size
        if downloaded > total_size:
            downloaded = total_size
            
        progress = (downloaded / total_size) * 100
        bar_length = 30
        filled_length = int(bar_length * downloaded // total_size)
        bar = '‚ñà' * filled_length + '-' * (bar_length - filled_length)
        
        print(f"\r[{bar}] {progress:.1f}% ({format_file_size(downloaded)}/{format_file_size(total_size)})", end='')
        time.sleep(0.1)
    
    print("\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

def demo_utils():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É—Ç–∏–ª–∏—Ç"""
    print_header("üîß –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–¢–ò–õ–ò–¢")
    
    print("üìè –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤:")
    sizes = [512, 1024, 1024*1024, 1024*1024*1024, 1024*1024*1024*1024]
    for size in sizes:
        print(f"  {size:>12} –±–∞–π—Ç = {format_file_size(size)}")
    
    print("\n‚è∞ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏:")
    import time
    timestamps = [
        time.time(),  # —Å–µ–π—á–∞—Å
        time.time() - 3600,  # —á–∞—Å –Ω–∞–∑–∞–¥
        time.time() - 86400,  # –¥–µ–Ω—å –Ω–∞–∑–∞–¥
        time.time() - 86400 * 30,  # –º–µ—Å—è—Ü –Ω–∞–∑–∞–¥
        time.time() - 86400 * 365,  # –≥–æ–¥ –Ω–∞–∑–∞–¥
    ]
    
    for ts in timestamps:
        print(f"  {format_time_ago(int(ts))}")
    
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤:")
    dirty_names = [
        '–ú–æ–¥ —Å <–ø–ª–æ—Ö–∏–º–∏> —Å–∏–º–≤–æ–ª–∞–º–∏',
        '–§–∞–π–ª/—Å\\–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏:—Å–∏–º–≤–æ–ª–∞–º–∏',
        '–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã',
        '–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ.zip'
    ]
    
    from utils import sanitize_filename
    for name in dirty_names:
        clean_name = sanitize_filename(name)
        print(f"  '{name}' -> '{clean_name}'")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üéÆ Steam Workshop Downloader - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("=" * 60)
    print("–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ GUI")
    print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    try:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Steam API
        games = demo_steam_api()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π
        if games:
            demo_workshop_items(games)
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        demo_cache()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
        demo_search()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        demo_download_simulation()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É—Ç–∏–ª–∏—Ç
        demo_utils()
        
        print_header("‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
        print("–í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å GUI –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("  python main.py")
        print("\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: GUI —Ç—Ä–µ–±—É–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ (X11/Wayland)")
        
    except KeyboardInterrupt:
        print("\n\nüëã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
